/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kawa.products.generated.api.server;

import com.kawa.products.generated.api.model.ProductDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Products", description = "the Products API")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /internal/api/v1/products : Ajoute un nouveau produit
     *
     * @param productDto  (required)
     * @return Produit ajouté avec succès (status code 201)
     *         or Mauvaise requête. (status code 400)
     *         or Erreur interne du serveur (status code 500)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Ajoute un nouveau produit",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Produit ajouté avec succès", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Mauvaise requête."),
            @ApiResponse(responseCode = "500", description = "Erreur interne du serveur")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/internal/api/v1/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> createProduct(
        @Parameter(name = "ProductDto", description = "", required = true) @Valid @RequestBody ProductDto productDto
    ) throws Exception {
        return getDelegate().createProduct(productDto);
    }


    /**
     * DELETE /internal/api/v1/products/{id} : Supprimer un produit à partir de son identifiant
     *
     * @param id ID du produit à supprimer (required)
     * @return ID invalide (status code 400)
     */
    @Operation(
        operationId = "deleteProductById",
        summary = "Supprimer un produit à partir de son identifiant",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "400", description = "ID invalide")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/internal/api/v1/products/{id}"
    )
    default ResponseEntity<Void> deleteProductById(
        @Parameter(name = "id", description = "ID du produit à supprimer", required = true) @PathVariable("id") Long id
    ) throws Exception {
        return getDelegate().deleteProductById(id);
    }


    /**
     * GET /internal/api/v1/products : Récupérer tous les produits
     *
     * @return Succès. Renvoie la liste de tous les produits. (status code 200)
     *         or Mauvaise requête (status code 400)
     *         or Produits non retrouvables (status code 404)
     *         or Erreur interne du serveur (status code 500)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Récupérer tous les produits",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Succès. Renvoie la liste de tous les produits.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Mauvaise requête"),
            @ApiResponse(responseCode = "404", description = "Produits non retrouvables"),
            @ApiResponse(responseCode = "500", description = "Erreur interne du serveur")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/internal/api/v1/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDto>> getAllProducts(
        
    ) throws Exception {
        return getDelegate().getAllProducts();
    }


    /**
     * GET /internal/api/v1/products/{id} : Récupérer un produit à partir de son identifiant
     *
     * @param id ID du produit à retrouver (required)
     * @return Succès. Renvoie le produit ayant l&#39;identifiant concerné. (status code 200)
     *         or ID invalide (status code 400)
     *         or Produit non retrouvable (status code 404)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Récupérer un produit à partir de son identifiant",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Succès. Renvoie le produit ayant l'identifiant concerné.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "ID invalide"),
            @ApiResponse(responseCode = "404", description = "Produit non retrouvable")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/internal/api/v1/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> getProductById(
        @Parameter(name = "id", description = "ID du produit à retrouver", required = true) @PathVariable("id") Long id
    ) throws Exception {
        return getDelegate().getProductById(id);
    }


    /**
     * PUT /internal/api/v1/products/{id} : Modifie un produit
     *
     * @param id ID du produit à retrouver (required)
     * @param productDto  (optional)
     * @return Produit modifié avec succès (status code 200)
     *         or Mauvaise requête. (status code 400)
     *         or Erreur interne du serveur (status code 500)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Modifie un produit",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Produit modifié avec succès"),
            @ApiResponse(responseCode = "400", description = "Mauvaise requête."),
            @ApiResponse(responseCode = "500", description = "Erreur interne du serveur")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/internal/api/v1/products/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProduct(
        @Parameter(name = "id", description = "ID du produit à retrouver", required = true) @PathVariable("id") Long id,
        @Parameter(name = "ProductDto", description = "") @Valid @RequestBody(required = false) ProductDto productDto
    ) throws Exception {
        return getDelegate().updateProduct(id, productDto);
    }

}
